package TestingProject;

import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;

public class OnlineTestingFrame extends javax.swing.JFrame {
    
    int count = 0, current = 0;
    JRadioButton[] jb = new JRadioButton[4];
    static Exam exam;
    static int randomNumberForUnorderedAnswer01;   // right answer

    /**
     * Creates new form OnlineTestingFrame
     */
    public OnlineTestingFrame() {
        initComponents();
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setLocationRelativeTo(null);  // to center the window when it launches
        setResizable(false);
        resultButton.setEnabled(false);
        
        jb[0] = answerRadioButton01;
        jb[1] = answerRadioButton02;
        jb[2] = answerRadioButton03;
        jb[3] = answerRadioButton04;
        
        exam = new Exam(1 , 5);
        set(exam);
    }
    
    public OnlineTestingFrame(String from, String to)   {
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setLocationRelativeTo(null);
        
        jb[0] = answerRadioButton01;
        jb[1] = answerRadioButton02;
        jb[2] = answerRadioButton03;
        jb[3] = answerRadioButton04;
        
        exam = new Exam(Integer.parseInt(from) , Integer.parseInt(to));
        set(exam);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AnswersButtonGroup = new javax.swing.ButtonGroup();
        questionNumberLabel = new javax.swing.JLabel();
        questionLabel = new javax.swing.JLabel();
        answerRadioButton01 = new javax.swing.JRadioButton();
        answerRadioButton02 = new javax.swing.JRadioButton();
        answerRadioButton03 = new javax.swing.JRadioButton();
        answerRadioButton04 = new javax.swing.JRadioButton();
        nextButton = new javax.swing.JButton();
        resultButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        questionNumberLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        questionNumberLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        questionNumberLabel.setText("Question Number");

        questionLabel.setText("Question Label:");

        AnswersButtonGroup.add(answerRadioButton01);
        answerRadioButton01.setText("Answer 1");
        answerRadioButton01.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerRadioButton01ActionPerformed(evt);
            }
        });

        AnswersButtonGroup.add(answerRadioButton02);
        answerRadioButton02.setText("Answer 2");
        answerRadioButton02.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerRadioButton02ActionPerformed(evt);
            }
        });

        AnswersButtonGroup.add(answerRadioButton03);
        answerRadioButton03.setText("Answer 3");

        AnswersButtonGroup.add(answerRadioButton04);
        answerRadioButton04.setText("Answer 4");
        answerRadioButton04.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerRadioButton04ActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        resultButton.setText("Result");
        resultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(questionNumberLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(33, Short.MAX_VALUE)
                        .addComponent(questionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 776, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(answerRadioButton04)
                                    .addComponent(answerRadioButton03)
                                    .addComponent(answerRadioButton02)
                                    .addComponent(answerRadioButton01)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(307, 307, 307)
                                .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(119, 119, 119)
                                .addComponent(resultButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(questionNumberLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(questionLabel)
                .addGap(28, 28, 28)
                .addComponent(answerRadioButton01)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(answerRadioButton02)
                .addGap(18, 18, 18)
                .addComponent(answerRadioButton03)
                .addGap(18, 18, 18)
                .addComponent(answerRadioButton04)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextButton)
                    .addComponent(resultButton))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void answerRadioButton02ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answerRadioButton02ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_answerRadioButton02ActionPerformed

    private void answerRadioButton04ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answerRadioButton04ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_answerRadioButton04ActionPerformed

    private void answerRadioButton01ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answerRadioButton01ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_answerRadioButton01ActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        if (evt.getSource() == nextButton) {
            if (check(exam))  {
                count = count + 1;
            }
            current++;
            set(exam);
            if(current == (exam.questionsForExam().length - 1)) {
                nextButton.setEnabled(false);
                resultButton.setEnabled(true);
            }
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void resultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultButtonActionPerformed
        if (evt.getSource() == resultButton) {
            if(check(exam)) {
                count = count + 1;
            }
            current++;
            
            int totalQuestions = exam.questionsForExam().length;
            int correctAnswers = count;
            double correctAnswersDouble = correctAnswers;
            int incorrectAnswers = totalQuestions - count;
            double percentageGrade = (correctAnswersDouble / totalQuestions * 100.0);
            int percentageGradeInt = (int) percentageGrade;
            char  letterGrade = calculateLetterGrade(percentageGrade);
            
            String message = "";
            
            if(letterGrade == 'A') {
                message = "Congrats!!!! You got an A!";
            } else if (letterGrade == 'B') {
                message = "Good Job! You got a B!";
            } else if (letterGrade == 'C') {
                message = "Passed! but needs some work. You got a C.";
            } else if (letterGrade == 'D') {
                message = "Not Passed! You can do better. You got a D.";
            } else {
                message = "Not Passed! You got an F";
            }
            
            JOptionPane.showMessageDialog(this, message + "\nTotal Questions: " + 
                    totalQuestions + ".\nCorrect Answers: " + correctAnswers +  
                    ".\nIncorrect Answers: " + incorrectAnswers + ".\nGrade: " +  
                    percentageGrade + ".");
            System.exit(0);
            
        }
    }//GEN-LAST:event_resultButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OnlineTestingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OnlineTestingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OnlineTestingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OnlineTestingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OnlineTestingFrame().setVisible(true);
            }
        });
    }
    
    void set(Exam exam) {
        int NUMBER_OF_ANSWERS =  4; 
        int randomNumberForUnorderedAnswer02;
        int randomNumberForUnorderedAnswer03;
        int randomNumberForUnorderedAnswer04;
        
        Question[] questionsForExam = exam.questionsForExam();
        
        questionLabel.setText(questionsForExam[current].getQuestion());
        questionNumberLabel.setText("Question Number " + (current + 1) + " of " + questionsForExam.length + ":"); 
        
        randomNumberForUnorderedAnswer01 = randomNumberRange(0 , NUMBER_OF_ANSWERS - 1);
        jb[randomNumberForUnorderedAnswer01].setText(questionsForExam[current].getRightAnswer());
        
        randomNumberForUnorderedAnswer02 = randomNumberWithException(0 , NUMBER_OF_ANSWERS - 1 , randomNumberForUnorderedAnswer01);
        jb[randomNumberForUnorderedAnswer02].setText(questionsForExam[current].getWrongAnswers()[randomNumberForUnorderedAnswer02]);
        
        randomNumberForUnorderedAnswer03 = randomNumberWith2Exception(0, NUMBER_OF_ANSWERS - 1, randomNumberForUnorderedAnswer01, randomNumberForUnorderedAnswer02);
        jb[randomNumberForUnorderedAnswer03].setText(questionsForExam[current].getWrongAnswers()[randomNumberForUnorderedAnswer03]);
        
        randomNumberForUnorderedAnswer04 = randomNumberWith3Exception(0, NUMBER_OF_ANSWERS - 1, randomNumberForUnorderedAnswer01, randomNumberForUnorderedAnswer02, randomNumberForUnorderedAnswer03);
        jb[randomNumberForUnorderedAnswer04].setText(questionsForExam[current].getWrongAnswers()[randomNumberForUnorderedAnswer04]);
        
        answersButtonGroup.clearSelection();
        
    }
 boolean check (Exam exam ) {
     for (int i = 0; i < exam.questionsForExam().length; i++) {
         if (current == i) {
             return jb[randomNumberForUnorderedAnswer01].isSelected();  //if right answer is selected
         }
     }
     return false;
 }
 
 public char calculateLetterGrade(double grade) {
     if (grade >= 90) {
         return 'A';
         
     }else if (grade >= 80) {
         return 'B';
     }else if (grade >= 70) {
         return 'C';
     }else if (grade >= 60)  {
         return 'D';
     }else {
         return 'F';
     }
 }

    
  
    
    public static int randomNumberRange(int min , int max) {
        Random rand = new Random();
        int randomNum;
        randomNum = rand.nextInt((max - min) + 1) + min;
        return randomNum;
    }
    public static int randomNumberWithException(int min , int max, int exception) {
        Random rand = new Random();
        int randomNum;
        
        do {
            randomNum = rand.nextInt((max - min) + 1) + min;
        } while (randomNum == exception);
        
        return randomNum;
    }
     public static int randomNumberWith2Exception(int min , int max, int exception, int exception01, int exception02) {
        Random rand = new Random();
        int randomNum;
        
        do {
            randomNum = rand.nextInt((max - min) + 1) + min;
        } while (randomNum == exception01 || randomNum == exception02);
        
        return randomNum;
    }
     public static int randomNumberWith3Exception(int min , int max, int exception, int exception01, int exception02, int exception03) {
        Random rand = new Random();
        int randomNum;
        
        do {
            randomNum = rand.nextInt((max - min) + 1) + min;
        } while (randomNum == exception01 || randomNum == exception02 || randomNum == exception03);
        
        return randomNum;
     }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup AnswersButtonGroup;
    private javax.swing.JRadioButton answerRadioButton01;
    private javax.swing.JRadioButton answerRadioButton02;
    private javax.swing.JRadioButton answerRadioButton03;
    private javax.swing.JRadioButton answerRadioButton04;
    private javax.swing.JButton nextButton;
    private javax.swing.JLabel questionLabel;
    private javax.swing.JLabel questionNumberLabel;
    private javax.swing.JButton resultButton;
    // End of variables declaration//GEN-END:variables

    private int randomNumberWith2Exception(int i, int i0, int randomNumberForUnorderedAnswer01, int randomNumberForUnorderedAnswer02) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private int randomNumberWith3Exception(int i, int i0, int randomNumberForUnorderedAnswer01, int randomNumberForUnorderedAnswer02, int randomNumberForUnorderedAnswer03) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

   
    }
